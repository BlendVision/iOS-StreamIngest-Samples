// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BVStreamIngest
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
@_exported import BVStreamIngest
import Foundation
import HaishinKit
import Swift
import UIKit
import VideoToolbox
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum StreamIngestQualityLevel : Swift.String {
  case low
  case medium
  case high
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol StreamIngestQuality {
  var level: BVStreamIngest.StreamIngestQualityLevel { get }
  var videoSize: CoreFoundation.CGSize { get }
  var videoBitRate: Swift.Int { get }
  var audioBitRate: Swift.Int { get }
}
public struct StreamIngestQualityLow : BVStreamIngest.StreamIngestQuality {
  public var level: BVStreamIngest.StreamIngestQualityLevel {
    get
  }
  public var videoSize: CoreFoundation.CGSize {
    get
  }
  public var videoBitRate: Swift.Int {
    get
  }
  public var audioBitRate: Swift.Int {
    get
  }
  public init()
}
public struct StreamIngestQualityMedium : BVStreamIngest.StreamIngestQuality {
  public var level: BVStreamIngest.StreamIngestQualityLevel {
    get
  }
  public var videoSize: CoreFoundation.CGSize {
    get
  }
  public var videoBitRate: Swift.Int {
    get
  }
  public var audioBitRate: Swift.Int {
    get
  }
  public init()
}
public struct StreamIngestQualityHigh : BVStreamIngest.StreamIngestQuality {
  public var level: BVStreamIngest.StreamIngestQualityLevel {
    get
  }
  public var videoSize: CoreFoundation.CGSize {
    get
  }
  public var videoBitRate: Swift.Int {
    get
  }
  public var audioBitRate: Swift.Int {
    get
  }
  public init()
}
public protocol StreamIngestDelegate : ObjectiveC.NSObjectProtocol {
  func streamIngestDidStartPublishing(_ streamIngest: BVStreamIngest.StreamIngest)
  func streamIngestDidStopPublishing(_ streamIngest: BVStreamIngest.StreamIngest)
  func streamIngestDidFailToPublish(_ streamIngest: BVStreamIngest.StreamIngest)
}
@objc @_inheritsConvenienceInitializers final public class StreamIngest : ObjectiveC.NSObject {
  final public var videoBitrate: Swift.Int {
    get
    set
  }
  final public var videoSize: CoreFoundation.CGSize {
    get
    set
  }
  final public var audioBitrate: Swift.Int {
    get
    set
  }
  final public var info: HaishinKit.RTMPStreamInfo? {
    get
  }
  final public var paused: Swift.Bool {
    get
    set
  }
  final public var currentFPS: Swift.UInt16 {
    get
  }
  weak final public var delegate: (any BVStreamIngest.StreamIngestDelegate)?
  final public var videoOrientation: UIKit.UIInterfaceOrientation {
    get
    set
  }
  @objc override dynamic public init()
  @objc deinit
  @objc override final public func addObserver(_ observer: ObjectiveC.NSObject, forKeyPath keyPath: Swift.String, options: Foundation.NSKeyValueObservingOptions = [], context: Swift.UnsafeMutableRawPointer?)
  @objc override final public func removeObserver(_ observer: ObjectiveC.NSObject, forKeyPath keyPath: Swift.String)
  final public func attachCamera(_ device: AVFoundation.AVCaptureDevice?, channel: Swift.UInt8 = 0, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  final public func attachAudio(_ device: AVFoundation.AVCaptureDevice?, automaticallyConfiguresApplicationAudioSession: Swift.Bool = false, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  final public func startPublish(rtmpUrl: Swift.String, stream name: Swift.String)
  final public func stopPublish()
  final public func close()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class StreamRenderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) final public func attachStream(_ stream: BVStreamIngest.StreamIngest?)
  @objc deinit
}
extension BVStreamIngest.StreamIngestQualityLevel : Swift.Equatable {}
extension BVStreamIngest.StreamIngestQualityLevel : Swift.Hashable {}
extension BVStreamIngest.StreamIngestQualityLevel : Swift.RawRepresentable {}
